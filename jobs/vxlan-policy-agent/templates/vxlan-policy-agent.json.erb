<%=
    require 'json'

  def network_array
    network = link('cf_network').p('network')
    return [network] if network.class != Array
    return network
  end

    toRender = {
      'log_level' => p('log_level'),
      'log_prefix' => 'cfnetworking',
      'iptables_c2c_logging' => p('iptables_logging'),
      'iptables_asg_logging' => link('cni_config').p('iptables_logging'),
      'iptables_accepted_udp_logs_per_sec' => p('iptables_accepted_udp_logs_per_sec'),
      'poll_interval' => p('policy_poll_interval_seconds'),
      'enable_asg_syncing' => p('enable_asg_syncing'),
      'asg_poll_interval' => p('asg_poll_interval_seconds'),
      'iptables_denied_logs_per_sec' => link('cni_config').p('iptables_denied_logs_per_sec'),
      'deny_networks' => {
        'always' => link('cni_config').p('deny_networks.always'),
        'running' => link('cni_config').p('deny_networks.running'),
        'staging' => link('cni_config').p('deny_networks.staging'),
       },
       'outbound_connections' => {
         'limit' => link('cni_config').p('outbound_connections.limit'),
         'logging' => link('cni_config').p('iptables_logging'),
         'burst' => link('cni_config').p('outbound_connections.burst'),
         'rate_per_sec' => link('cni_config').p('outbound_connections.rate_per_sec'),
      },

      'policy_server_url' => "https://#{p('policy_server.hostname')}:#{p('policy_server.internal_listen_port')}",
      'metron_address' => "127.0.0.1:#{p('metron_port')}",
      'underlay_ips' => spec.networks.to_h.values.map(&:ip),
      'debug_server_port' => p('debug_server_port'),
      'force_policy_poll_cycle_port' => p('force_policy_poll_cycle_port'),
      'enable_overlay_ingress_rules' => p('enable_overlay_ingress_rules'),
      "disable_container_network_policy" => p("disable_container_network_policy"),
      'overlay_network' => network_array,

      # hard-coded values, not exposed as bosh spec properties
      'ca_cert_file' => '/var/vcap/jobs/vxlan-policy-agent/config/certs/ca.crt',
      'client_cert_file' => '/var/vcap/jobs/vxlan-policy-agent/config/certs/client.crt',
      'client_key_file' => '/var/vcap/jobs/vxlan-policy-agent/config/certs/client.key',

      'cni_datastore_path' => '/var/vcap/data/container-metadata/store.json',
      'iptables_lock_file' => '/var/vcap/data/garden-cni/iptables.lock',
      'debug_server_host' => '127.0.0.1',
      'client_timeout_seconds' => 5,
      'vni' => 1,

      'force_policy_poll_cycle_host' => '127.0.0.1',
    }

  toRender[:loggregator]={}
  toRender[:loggregator][:loggregator_use_v2_api] = p("loggregator.use_v2_api")
  if p("loggregator.use_v2_api") == true
    toRender[:loggregator][:loggregator_api_port] = p("loggregator.v2_api_port")
    toRender[:loggregator][:loggregator_ca_path] = "/var/vcap/jobs/vxlan-policy-agent/config/certs/loggregator/ca.crt"
    toRender[:loggregator][:loggregator_cert_path] = "/var/vcap/jobs/vxlan-policy-agent/config/certs/loggregator/client.crt"
    toRender[:loggregator][:loggregator_key_path] = "/var/vcap/jobs/vxlan-policy-agent/config/certs/loggregator/client.key"
    toRender[:loggregator][:loggregator_job_deployment] = spec.deployment
    toRender[:loggregator][:loggregator_job_name] = spec.name
    toRender[:loggregator][:loggregator_job_index] = spec.id
    toRender[:loggregator][:loggregator_job_ip] = spec.address
    toRender[:loggregator][:loggregator_job_origin] = "vxlan-policy-agent"
    toRender[:loggregator][:loggregator_source_id] = "vxlan-policy-agent"
    toRender[:loggregator][:loggregator_instance_id] = spec.id
  end

    JSON.pretty_generate(toRender)
%>
